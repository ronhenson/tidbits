created: 20141206025300000
creator: ronh
modified: 20200716152907936
modifier: ronh
revision: 0
tags: #LinuxWindows #Tidbit #Tech #Terminal
title: Console Terminal xterm colors and cursor controls
type: text/vnd.tiddlywiki

{{||journalHeaderTemplate}}

<div>
    <p>URL: <a href='http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux'>TITLE='How to change the output color of echo in linux'</a></p>
</div>

<h4>Terminal color codes</h4>

```
Black        0;30     Dark Gray     1;30
Blue         0;34     Light Blue    1;34
Green        0;32     Light Green   1;32
Cyan         0;36     Light Cyan    1;36
Red          0;31     Light Red     1;31
Purple       0;35     Light Purple  1;35
Brown/Orange 0;33     Yellow        1;33
Light Gray   0;37     White         1;37
```

<h4>Example how to use</h4>

```bash
red='\033[0;31m'
NC='\033[0m' # No Color
echo -e "${red}Hello Stackoverflow${NC}"
```

<h2>tput usage</h2>
<h3>Direct</h3>
<p>Call tput as part of a sequence of commands</p>

```bash
tput setaf 1; echo "this is red text"
```
<p>Use <code>;</code> instead of <code>&amp&amp</code> so if tput errors the text still shows.</p>
<h3>Shell variables</h3>

<p>Another option is to use shell variables:</p>

```bash
red=`tput setaf 1`
green=`tput setaf 2`
reset=`tput sgr0`
echo "${red}red text ${green}green text${reset}"
```

<p><strong>tput</strong> produces character sequences that are interpreted by the terminal as having a special meaning. They will not be shown themselves. Note that they can still be saved into files or processed as input by programs other than the terminal.</p>

<h3>Command substitution</h3>

<p>It may be more convenient to insert tput's output directly into your echo strings using command substitution:</p>

```bash
echo "$(tput setaf 1)Red text $(tput setab 7)and white background$(tput sgr 0)"
```

Screenshot of colour terminal text
<h3>Foreground <code>&amp</code> background colour commands</h3>

```bash
tput setab [1-7] # Set the background colour using ANSI escape
tput setaf [1-7] # Set the foreground colour using ANSI escape
```

<p>Colours are as follows:</p>

```
Num  Colour    #define         R G B

0    black     COLOR_BLACK     0,0,0
1    red       COLOR_RED       1,0,0
2    green     COLOR_GREEN     0,1,0
3    yellow    COLOR_YELLOW    1,1,0
4    blue      COLOR_BLUE      0,0,1
5    magenta   COLOR_MAGENTA   1,0,1
6    cyan      COLOR_CYAN      0,1,1
7    white     COLOR_WHITE     1,1,1
```

<p>There are also non-ANSI versions of the colour setting functions (<strong>setb</strong> instead of <strong>setab</strong>, and <strong>setf</strong> instead of <strong>setaf</strong>) which use different numbers, not given here.</p>

<h2>Text mode commands</h2>

```bash
tput bold    # Select bold mode
tput dim     # Select dim (half-bright) mode
tput smul    # Enable underline mode
tput rmul    # Disable underline mode
tput rev     # Turn on reverse video mode
tput smso    # Enter standout (bold) mode
tput rmso    # Exit standout mode
```

<h2>Cursor movement commands</h2>

```bash
tput cup Y X # Move cursor to screen postion X,Y (top left is 0,0)
tput cuf N   # Move N characters forward (right)
tput cub N   # Move N characters back (left)
tput cuu N   # Move N lines up
tput ll      # Move to last line, first column (if no cup)
tput sc      # Save the cursor position
tput rc      # Restore the cursor position
tput lines   # Output the number of lines of the terminal
tput cols    # Output the number of columns of the terminal
```

<h2>Clear and insert commands</h2>

```bash
tput ech N   # Erase N characters
tput clear   # Clear screen and move the cursor to 0,0
tput el 1    # Clear to beginning of line
tput el      # Clear to end of line
tput ed      # Clear to end of screen
tput ich N   # Insert N characters (moves rest of line forward!)
tput il N    # Insert N lines
```

<h2>Other commands</h2>

```bash
tput sgr0    # Reset text format to the terminal's default
tput bel     # Play a bell
```

<h2>Scripts</h2>

<p><strong>tput</strong> accepts scripts containing one command per line, which are executed in order before <strong>tput</strong> exits.</p>

<p>Avoid temporary files by echoing a multiline string and piping it:</p>

```bash
echo -e "setf 7\nsetb 1" | tput -S  # set fg white and bg red
```

</div>
</html>

```bash
 screen
tput ich N   # Insert N characters (moves rest of line forward!)
tput il N    # Insert N lines
```

<h2>Other commands</h2>

```bash
tput sgr0    # Reset text format to the terminal's default
tput bel     # Play a bell
```

<h2>Scripts</h2>

<p><strong>tput</strong> accepts scripts containing one command per line, which are executed in order before <strong>tput</strong> exits.</p>

<p>Avoid temporary files by echoing a multiline string and piping it:</p>

```bash
echo -e "setf 7\nsetb 1" | tput -S  # set fg white and bg red

fg white and bg red
```

<h2>Terminal bell</h2>

Insert in home directory files `.inputrc`
Add in file `set bell-style none`