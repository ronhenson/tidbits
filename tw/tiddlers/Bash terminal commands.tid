created: 20150101165500000
creator: ronh
modified: 20200716152907627
modifier: ronh
revision: 0
tags: #BASH #Tech #Tidbit
title: Bash terminal commands
type: text/vnd.tiddlywiki

{{||journalHeaderTemplate}}

! Javascript used for tidbit system I built `(OLD)`

```html
<html>
<head>
<META charset="utf-8">
<title id="infoObjectTitle">tb:bash History Commands </title>
<link href="css/tb.css" rel="stylesheet" type="text/css">

<script language='JavaScript' type='text/JavaScript'>
// Define Title, Description, Creation Date and tags
var infoObjectRH = {
    "info" : {
        "title" : "bash History Commands",
		"description": "command line history",
		"cdate" : "2014-12-01T18:53:04+00:00",
		"tags" : [ { "tag" : "tidbits" },
			{ "tag" : "bash" },
			{ "tag" : "" },
			{ "tag" : "" },
			{ "tag" : "" }
        ]
    }
};

</script>

</head>
<body>
<script src="tidbit.js"></script>

 <HR class="h1">

</div>
<!-- ALTERING THE NET LINE <DIV..  WILL REQUIRE A CODE CHANGE IN tdbi_new SCRIPT -->


<div id="tidbitbody">
```

<h1>1. Display timestamp using `HISTTIMEFORMAT`</h1>
<p>Typically when you type history from command line, it displays the command# and the command. For auditing purpose, it may be beneficial to display the timepstamp along with the command as shown below.</p>

```bash
# export HISTTIMEFORMAT='%F %T '
# history | more
1  2008-08-05 19:02:39 service network restart
2  2008-08-05 19:02:39 exit
3  2008-08-05 19:02:39 id
4  2008-08-05 19:02:39 cat /etc/redhat-release
```

<h1>2. Search the history using <code>Control+R</code></h1>

<p>I strongly believe, this may be your most frequently used feature of history. When you’ve already executed a very long command, you can simply search history using a keyword and re-execute the same command without having to type it fully. Press Control+R and type the keyword. In the following example, I searched for red, which displayed the previous command <code>cat /etc/redhat-release</code> in the history that contained the word <code>red</code>.</p>

```bash
# [Press Ctrl+R from the command prompt, which will display the reverse-i-search prompt]
(reverse-i-search)`red': cat /etc/redhat-release
[Note: Press enter when you see your command,
which will execute the command from the history]

cat /etc/redhat-release
Fedora release 9 (Sulphur)
```
<p>Sometimes you want to edit a command from history before executing it. For e.g. you can search for httpd, which will display service httpd stop from the command history, select this command and change the stop to start and re-execute it again as shown below.</p>

```bash
# [Press Ctrl+R from the command prompt,which will display the reverse-i-search prompt]
(reverse-i-search)`httpd': service httpd stop
[Note: Press either left arrow or right arrow key when you see your
command, which will display the command for you to edit, before executing it]
service httpd start
```

<h1>3. Repeat previous command quickly using 4 different methods</h1>

<p>Sometime you may end up repeating the previous commands for various reasons. Following are the 4 different ways to repeat the last executed command.

<ol>
    <li>Use the up arrow to view the previous command and press enter to execute it. </li>
    <li>Type !! and press enter from the command line</li>
    <li>Type !-1 and press enter from the command line.</li>
    <li>Press Control+P will display the previous command, press enter to execute it</li>
</ol></p>

<h1>4. Execute a specific command from history</h1>

<p>In the following example, If you want to repeat the command #4, you can do !4 as shown below.</p>

```bash
1  service network restart
2  exit
3  id
4  cat /etc/redhat-release

!4
cat /etc/redhat-release
Fedora release 9 (Sulphur)
```

<h1>5. Execute previous command that starts with a specific word</h1>

<p>Type ! followed by the starting few letters of the command that you would like to re-execute. In the following example, typing !ps and enter, executed the previous command starting with ps, which is ‘ps aux | grep yp’.</p>

```bash
!ps
ps aux | grep yp
root     16947  0.0  0.1  36516  1264 ?        Sl   13:10   0:00 ypbind
root     17503  0.0  0.0   4124   740 pts/0    S+   19:19   0:00 grep yp
```

<h1>6. Control the total number of lines in the history using <code>HISTSIZE</code></h1>

<p>Append the following two lines to the .bash_profile and relogin to the bash shell again to see the change. In this example, only 450 command will be stored in the bash history.</p>

```bash
sh_profile
HISTSIZE=450
HISTFILESIZE=450
```
<h1>7. Change the history file name using <code>HISTFILE</code></h1>

<p>By default, history is stored in ~/.bash_history file. Add the following line to the .bash_profile and relogin to the bash shell, to store the history command in .commandline_warrior file instead of .bash_history file. I’m yet to figure out a practical use for this. I can see this getting used when you want to track commands executed from different terminals using different history file name.</p>

```bash
# vi ~/.bash_profile
HISTFILE=/root/.commandline_warrior
```

<p>If you have a good reason to change the name of the history file, please share it with me, as I’m interested in finding out how you are using this feature.</p>

<h1>8. Eliminate the continuous repeated entry from history using <code>HISTCONTROL</code></h1>

<p>In the following example pwd was typed three times, when you do history, you can see all the 3 continuous occurrences of it. To eliminate duplicates, set <code>HISTCONTROL</code> to ignoredups as shown below.</p>

```bash
# pwd
# pwd
# pwd
# history | tail -4
44  pwd
45  pwd
46  pwd [Note that there are three pwd commands in history, after</span>
executing pwd 3 times as shown above]
47  history | tail -4

# export HISTCONTROL=ignoredups
# pwd
# pwd
# pwd
# history | tail -3
56  export HISTCONTROL=ignoredups
57  pwd [Note that there is only one pwd command in the history, even after</span>
executing pwd 3 times as shown above]
58  history | tail -4
```

<h1>9. Erase duplicates across the whole history using <code>HISTCONTROL</code></h1>

<p>The ignoredups shown above removes duplicates only if they are consecutive commands. To eliminate duplicates across the whole history, set the  code>HISTCONTROL</code> to erasedups as shown below.</p>

```bash
# export HISTCONTROL=erasedups
# pwd
# service httpd stop
# history | tail -3
38  pwd
39  service httpd stop
40  history | tail -3

# ls -ltr
# service httpd stop
# history | tail -6
35  export HISTCONTROL=erasedups
36  pwd
37  history | tail -3
38  ls -ltr
39  service httpd stop
[Note that the previous service httpd stop after pwd got erased]</span>
40  history | tail -6
```

<h1>10. Force history not to remember a particular command using <code>HISTCONTROL</code></h1>

<p>When you execute a command, you can instruct history to ignore the command by setting <code>HISTCONTROL</code> to ignorespace AND typing a space in front of the command as shown below. I can see lot of junior sysadmins getting excited about this, as they can hide a command from the history. It is good to understand how ignorespace works. But, as a best practice, don’t hide purposefully anything from history.</p>

```bash
# export HISTCONTROL=ignorespace
# ls -ltr
# pwd
#  service httpd stop [Note that there is a space at the beginning of service,</span>
to ignore this command from history]
# history | tail -3
67  ls -ltr
68  pwd
69  history | tail -3
```

<h1>11. Clear all the previous history using <code>option -c</code></h1>

<p>Sometime you may want to clear all the previous history, but want to keep the history moving forward.</p>

```bash
# history -c
```

<h1>12. Subtitute words from history commands</h1>

<p>When you are searching through history, you may want to execute a different command but use the same parameter from the command that you’ve just searched.</p>
<p>In the example below, the <code>!!:$</code> next to the vi command gets the argument from the previous command to the current command.</p>

```bash
# ls anaconda-ks.cfg
anaconda-ks.cfg
# vi !!:$
vi anaconda-ks.cfg
```

<p>In the example below, the !^ next to the vi command gets the first argument from the previous command (i.e cp command) to the current command (i.e vi command).</p>

```bash
cp anaconda-ks.cfg anaconda-ks.cfg.bak
anaconda-ks.cfg
vi  !^
vi anaconda-ks.cfg
```
<h1>13. Substitute a specific argument for a specific command.</h1>

<p>In the example below, <code>!cp:2</code> searches for the previous command in history that starts with cp and takes the second argument of cp and substitutes it for the ls -l command as shown below.</p>

```bash
cp ~/longname.txt /really/a/very/long/path/long-filename.txt
ls -l !cp:2
ls -l /really/a/very/long/path/long-filename.txt
```

<p>In the example below, <code>!cp:$</code> searches for the previous command in history that starts with cp and takes the last argument (in this case, which is also the second argument as shown above) of cp and substitutes it for the ls -l command as shown below.</p>

```bash
# ls -l !cp:$
ls -l /really/a/very/long/path/long-filename.txt
```

<h1>14. Disable the usage of history using HISTSIZE</h1>
<p>If you want to disable history all together and don’t want bash shell to remember the commands you’ve typed, set the HISTSIZE to 0 as shown below.</p>

```bash
export HISTSIZE=0
 history
</textarea>
<textarea cols="100" rows="1">
# [Note that history did not display anything
```
<h1>15. Ignore specific commands from the history using <code>HISTIGNORE</code></h1>

<p>Sometimes you may not want to clutter your history with basic commands such as pwd and ls. Use <code>HISTIGNORE</code> to specify all the commands that you want to ignore from the history. Please note that adding ls to the <code>HISTIGNORE</code> ignores only ls and not <code>ls -l</code>. So, you have to provide the exact command that you would like to ignore from the history.</p>

```bash
# export HISTIGNORE="pwd:ls:ls -ltr:"
# pwd
# ls
# ls -ltr
# service httpd stop

# history | tail -3
79  export HISTIGNORE="pwd:ls:ls -ltr:"
80  service httpd stop
81  history

# [Note that history did not record pwd, ls and ls -ltr]
```
