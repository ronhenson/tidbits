caption: how to record, add, use vim macros
created: 20170914022339812
creator: ronh
modified: 20200716152910677
modifier: ronh
revision: 0
tags: #VIM #Tidbit #Tech
title: vim macro
type: text/vnd.tiddlywiki

! <$link to={{!!title}}>{{!!title}} - {{!!caption}}</$link><br />
<$view field="created" format="date" template="Created: YYYY-0MM-0DD DDD"/><br />
<$view field="modified" format="date" template="Modified: YYYY-0MM-0DD DDD"/>

<p> A macro is a series of keystrokes meant to be "played back" by Vim without any delay. Macros can be stored in registers or variables, bound to keys, or executed on the command line.</p>

<h1> To record a macro </h1>

<div class="blk">

```bash
# to record in registry a:
qa0f<70i ^[023ldw 

# to find a word in this example find the first < and mark to > and jump to the next instance of the word
register b: 0f<vf>*nn70i ^[0100ldw       ; column 3


register d: 0f<vf>*nn70i ^[0100ldw       ; column 4
register e: 0f<vf>*nnn70i ^[0138ldw      ; column 5

```

</div>

! To run macro on multiple lines

<div class="blk">

	<ul>
    
		<li> Select lines to act on </li>
    	<li> Select command mode </li>
    	<li> To act on lines marked in <code>vim</code> </li>
        <ul>
        	<li> Select the lines you want to act upon and execute command mode <code>:</code> </li>
        	<li> <code>VG:normal @a</code> </li>
        </ul>
        <li> to act upon 20 lines, for example <code>20@a</code> </li>
    </ul>
 
 </div>
 
<h1> A link that is helpful using macros: </h1>

<div class="blk">

	<p><a href="https://stackoverflow.com/documentation/vim/1447/macros#t=201709141842117286392">StackOverflow vim macro recorder</a> </p>

<h1> Edit a macro </h1>

	<ul>
		<li>Put the macro on an empty line with `"<register>p`. </li>
  	    <li>If your macro is saved in register a, the command is `"ap`.</li>
    	<li>Edit the macro as needed.</li>
    	<li>Yank the macro into the correct register by moving the cursor to the beginning of the line and using `"<register>y$`.</li>
    	<li>You can re-use the original register or use another one. If you want to use <span style="color:Purple;">register b</span>, the command is `"by$`. or by using `"<register>d$` (deletes the unused line)</li>
    </ul>

</div>

! Side Note

<div class="blk">

<h2> &lt;ctrl&gt;+a will increment a number the cursor is over </h2>

</div>
<br />

! Options to create and store macros

<div class="blk">

<p> Here is a simple macro that uppercases the third word on a line: </p>

```
0wwgUiw
```

<p> That macro could be recorded into register q: </p>

```
qq         start recording into register q
0wwgUiw    
q          stop recording
```

<p> or saved directly into register q: </p>

```
:let @q = '0wwgUiw'
```

<p> to be played back with: </p>

```
@q
```

<p> But it could also be typed directly in the command-line: </p>

```
:normal 0wwgUiw
```

<p> for instant playback via the :normal command.
<br /> Or put into a variable: </p>

```
:let myvar = '0wwgUiw'
```

<p> to be played back with: </p>

```
@=myvar
```

<p> Or saved as a mapping: </p>

```
nnoremap <key> 0wwgUiw
```

<p> to be played back by pressing `<key>`. </p>

<p> If you want to store a macro for later reuse you can type in insert mode: </p>

```
<C-r>q
```

<p> This inserts the macro in register q (in this example: 0wwgUiw). You can use this output e.g. to define the macro in your vimrc: </p>

```
let @q='0wwgUiw'
```

<p> Doing so the register q is initialized with this macro every time you start vim. </p>

</div>

! Recursive Macros

<div class="blk">

<h1> Vim macros can also be recursive </h1>

<blockquote>

<p> Vim macros can also be recursive. This is useful for when you need to act on every line (or other text object) till the end of the file. </p>

<p> To record a recursive macro, start with an empty register. (A register can be emptied using `q<register>q`.) </p>

<p> Choose a consistent starting point on each line to start and finish. </p>

<p> Before finishing recording, invoke the macro itself as the last command. (This is why the register must be empty: so it'll do nothing, as the macro doesn't exist yet). </p>

<p> Example, given the text </p>

```
line 1
line 2
line 3
foo bar
more random text
.
.
.
line ???
```

<p> In normal mode, with the cursor on the first line and a empty register a, one could record this macro: </p>

```
qaI"<Esc>A"<Esc>j@aq
```

<p> Then with a single invocation of @a, all the lines of the file would be now inside double quotes. </p>


</blockquote>

<h1> Example 1. generate array sequence (1 to 20).</h1>

<blockquote>

with q command we could simplify a lot of tedious work in vim.

<h2> STEP 1. press `i` to enter insert mode, input `1` </h2>

```
1
```

<h2> STEP 2. Record following action: "append the last number to the next line, and increment the number" </h2>

    type `esc` to exit input mode
    type `qa` to enter record mode, using buffer `a`
    type `yy` and `p` to copy current line and paste it as the next line
    type `ctrl +` a to increment number
    type `q` again to finish record

```
1
2
```

<h2> STEP 3. Replay action 18 times. </h2>

<p>type `18@a` to replay action 3 and action 4 in step 2.</p>

```
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
```

</blockquote>
</div>