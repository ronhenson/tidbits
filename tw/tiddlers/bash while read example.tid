created: 20141011215600000
creator: ronh
modified: 20200716152907641
modifier: ronh
revision: 0
tags: #BASH #Tidbit #Tech #Script
title: bash while read example
type: text/vnd.tiddlywiki

{{||journalHeaderTemplate}}

<div id="tidbitbody">

! Example of input <<< a bash command output as if a file
    
 <h2> While loop - will not maintain indentation </h2>

```bash
while read line
do
 echo hi $line
done <<< "$(ls -1d *)"

# or old way


while read line
do
        echo $line
done < <(ls -1d *)
```

<h2> While loop - will maintain indentation </h2>

```bash
while IFS=&#39;&#39; read -r line; do
    printf "%s\n" $line
done < $path/$Input_File
```

!! Alternate form of redirected while loop

```bash
#!/bin/bash

# This is an alternate form of the preceding script.

#  Suggested by Heiner Steven
#+ as a workaround in those situations when a redirect loop
#+ runs as a subshell, and therefore variables inside the loop
# +do not keep their values upon loop termination.


if [ -z "$1" ]
then
  Filename=names.data     # Default, if no filename specified.
else
  Filename=$1
fi  

exec 3<&0                 # Save stdin to file descriptor 3.
exec 0<"$Filename"        # Redirect standard input.

count=0
echo

while [ "$name" != Smith ]
do
  read name               # Reads from redirected stdin ($Filename).
  echo $name
  let "count += 1"
done                      #  Loop reads from file $Filename
                          #+ because of line 20.

#  The original version of this script terminated the "while" loop with
#+      done <"$Filename" 
#  Exercise:
#  Why is this unnecessary?

exec 0<&3                 # Restore old stdin.
exec 3<&-                 # Close temporary fd 3.

echo; echo "$count names read"; echo

exit 0
```