created: 20160816205009203
creator: ronh
modified: 20200716152908342
modifier: ronh
revision: 0
tags: #GIT #Tech #Tidbit
title: GIT Notes Branching
type: text/vnd.tiddlywiki

{{||journalHeaderTemplate}}

<style>
.left { padding-left: 20px; margin-top: 0px;}
.gitcolor {color:magenta; font-weight:bold;}
.comcolor, pre {color:blue;}
.cmdcolor {color: green;}
</style>

<h1> GIT Branching </h1>

<h2> Viewing and creating branches </h2>

<pre># ### Create a branch
<span class="gitcolor">$ git branch new_feature -- still on the master branch</span>
<span class="gitcolor">$ git branch</span>
<span class="cmdcolor">$ ls -la .git/refs/heads</span>
    total 16
    drwxrwxr-x. 2 ronh ronh 4096 Jul  3 08:32 .
    drwxrwxr-x. 4 ronh ronh 4096 Jul  2 11:29 ..
    -rw-rw-r--. 1 ronh ronh   41 Jul  2 17:47 master
    -rw-rw-r--. 1 ronh ronh   41 Jul  3 08:32 new_feature

# ## Have 2 branches pointing at the same HEAD until you start making changes
<span class="cmdcolor">$ cat .git/HEAD</span>
    ref: refs/heads/master

<span class="cmdcolor">$ cat .git/refs/heads/master</span>
    f7a4006a35902c7c75561929496665d264f356e8


<span class="cmdcolor">$ cat .git/refs/heads/new_feature </span>
    f7a4006a35902c7c75561929496665d264f356e8
</pre>

<h2> Creating and switching branches </h2>

<pre># ### Switch to the new branch
<span class="gitcolor">$ git checkout new_feature</span>
    Switched to branch 'new_feature'

<span class="gitcolor">$ git branch</span>
    master * new_feature

# ### Able to switch back and forth from the master to 'new_feature' branch

<span class="gitcolor">$ git checkout master</span>
<span class="gitcolor">$ git branch</span>
    * master  new_feature

<span class="gitcolor">$ git checkout new_feature</span>
    Switched to branch 'new_feature'
    ronh@H10:explore_california$ git branch
    master
    * new_feature

# ### Create and checkout a new branch called 'shorten_title'
<span class="gitcolor">$ git checkout -b shorten_title</span>
    Switched to a new branch 'shorten_title'

# ### git checkout -- &lt;file&gt; checks out a file in a branch or master without changing
# ### Cannot switch branches unless the branch you are on is clean
</pre>

<h2> Comparing branches </h2>

<pre># ### Difference of tip master and tip new_feature
<span class="gitcolor">$ git diff master..new_feature</span>
<span class="gitcolor">$ git diff --color-words new_feature..shorten_title</span>
# ### git diff parent shorten_title
<span class="gitcolor">$ git diff --color-words new_feature..shorten_title^</span>
# ### Show what branches have complete history of the particular branch you are in
# ### In this case all of master and new_feature are in shorten_title
# ### So we could delete new_feature and shorten_title would not be affected
<span class="gitcolor">$ git branch --merged</span>
    master
    new_feature
  * shorten_title

<span class="gitcolor">$ git checkout new_feature</span>
# ### shorten_title does has features that are not in new_feature
<span class="gitcolor">$ git branch --merged</span>
    master
  * new_feature
</pre>

<h2> Rename a branch using -m or --move, Delete branch using -d or --delete </h2>

<pre><span class="gitcolor">$ git branch -m new_feature seo_title</span>
# ### Delete a branch - make sure you are on the master branch
<span class="gitcolor">$ git checkout master</span>
# ### create branch
<span class="gitcolor">$ git branch branch_to_delete</span>
# ### to delete -d or --delete
<span class="gitcolor">$ git branch --delete branch_to_delete</span>
    Deleted branch branch_to_delete (was f7a4006).

# ### If there has been a change that is not in the branch you are now. Cap -D will override
<span class="gitcolor">$ git branch -d branch_to_delete </span>
    error: The branch 'branch_to_delete' is not fully merged.
    If you are sure you want to delete it, run 'git branch -D branch_to_delete'.

<span class="gitcolor">$ git branch -D branch_to_delete </span>
    Deleted branch branch_to_delete (was 26c7506).</span>
# ### Command Prompt - include the branck we are on
</pre>

<h1> Merging branches </h1>

<h2> Merging code </h2>

<pre>
# ### Be sure to be in the receiver of the merge branch always have a clean working directory
<span class="gitcolor">$ git checkout master</span>
# ### A fast forward merge
<span class="gitcolor">$ git merge seo_title</span>
   Updating f7a4006..c6cbf97
   Fast-forward
   index.html | 2 +-
   1 file changed, 1 insertion(+), 1 deletion(-)
</pre>

<h2> Using fast-forward merge vs. true merge </h2>

<pre>
# ### will show no difference 
<span class="gitcolor">$ git diff master..seo_title</span>
# ### merging with a --no-ff option will force a commit.  Might want to do this for documentation of the merge
# ### merging with a --ff-only option will force a commit.  Might want to do this for documentation of the merge
<span class="gitcolor">$ git merge --no-ff branch-to-merge</span>
</pre>

<h2> Merging Conflicts </h2>

<pre># ### an example with mission.html having a conflict
<span class="gitcolor">$ git merge text_edits</span>

Auto-merging mission.html
CONFLICT (content): Merge conflict in mission.html
Automatic merge failed; fix conflicts and then commit the result.

# ### In a middle of a merge with a conflict
<span class="gitcolor">$ git status</span>

On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add &lt;file&gt;. . ." to mark resolution)

	both modified:   mission.html

no changes added to commit (use "git add" and/or "git commit -a")

# ### Resolving conflicts can abort, correct or use one of many merge tools available
# ###
<span class="gitcolor">$ git merge --abort</span>

# ### fix the issues then:
<span class="gitcolor">$ git add filenames</span>
<span class="gitcolor">$ git commit</span>

# ### to use a mergetool
<span class="gitcolor">$ git mergetool</span>

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
meld opendiff kdiff3 tkdiff xxdiff tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff
No files need merging

<span class="gitcolor">$ git mergetool --tool=nameoftool</span>

</pre>
