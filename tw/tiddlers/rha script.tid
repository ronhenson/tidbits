created: 20140903161500000
creator: ronh
modified: 20200716152909622
modifier: ronh
revision: 0
tags: #BASH #Tidbit #Tech #Script
title: rha script
type: text/vnd.tiddlywiki

{{||journalHeaderTemplate}}

```bash
#!/bin/bash

function stripquotes() {
   local argName=$1
   if [[ $argName =~ $strip_last  ]]; then argName=${argName:0:-1}; fi
   if [[ $argName =~ $strip_first ]]; then argName=${argName:1};    fi
   echo "$argName"
} 

function addquotes() {
   local argName=$1
   if [[ $argName =~ $add_last  ]]; then argName=$argName$quote;  fi
   if [[ $argName =~ $add_first ]]; then argName=$quote$argName;  fi
   echo "$argName"
} 

# Initialize Variables
strip_first='^"'
add_first='^[^"]'
strip_last='"$'
add_last='[^"]$'
quote='"'
TODAYS_DATE="$(date --date="today" "+%F_%U_%a_%H:%M")"
header_date=$(addquotes "$(date --date="today" "+%F")")
header_weekno=$(addquotes "$(date --date="today" "+%U")")
header_weekday=$(addquotes "$(date --date="today" "+%a")")
header_time=$(addquotes "$(date --date="today" "+%H:%M")")
header_type=$(addquotes "H")
header_status=$(addquotes "STATUS")
header_task=$(addquotes "TASK")
header_hours=$(addquotes "HRS")
header_misc=$(addquotes "MISC")
header_comment=$(addquotes "COMMENT")
HEADER="$header_type;$header_status;$header_task;$header_hours;$header_misc;$header_comment;"

DATE=""
WEEKNO=""
WEEKDAY=""
TIME=""
TYPE=""
STATUS=""
TASKS=""
HOURS=""
MISC=""
COMMENT=""

flagMISC="false"
flagTYPE="false"
flagSTATUS="false"
flagTASKS="false"
flagHOURS="false"
flagCOMMENT="false"

TODAYDIR="$HOMERH/today"
TODAYCSV=$TODAYDIR"/activity_${TODAYS_DATE:0:13}.csv"
ACTIVITYTASKS=$TODAYDIR/activity_tasks
#FILENAME=$TODAYCSV
FILENAME=""
YEAR=${TODAYS_DATE:0:4}
MN=${TODAYS_DATE:5:2}
DAY=${TODAYS_DATE:8:2}
ACTIVITYDIR="$NET/docx/activity"
ACTIVITYLOG="$HOMERH/log/activity.log"
color="\e[0m"
normal="\e[0m"
argRegex="^-[tskhdmc]"
numRegex="^[0-9]+$"
actionRegex="[CD]"
action=${1^^}
fileIndex="000"
activity_tmp=$TODAYDIR/activity_tmp

# help
if  [[ $action == "--HELP" || $action == "-HELP" || $action == "-H" ]]
then
    echo " -dtoday -f"2014-04-04*" -tP|W|O|H -sDONE|WIP|INFO|TODO -kTASKS -h0.0 -m"MISC" -c"COMMENT" -anormal|all|short"
    argName=$(stripquotes "${2^^}")
    case ${argName^^} in
        -K|TASKS)
            cat $ACTIVITYTASKS
            ;;
        -K*)
            printf "%s\n", $( egrep "\b${argName:2}\b" $ACTIVITYTASKS) 
            ;;
        -S|STATUS)
            printf "%s\n", " $( egrep -m1 "^STATUS\b" $ACTIVITYTASKS): "
            #printf "${color}%s${normal}\n", " $( egrep -m1 "^STATUS\b" $ACTIVITYTASKS): "
            ;;
        -T|TYPE)
            printf "%s\n",  "$( egrep -m1 "^#TYPE\b" $ACTIVITYTASKS): "
            printf "%s\n",  "$( egrep -m1 "^TYPE\b" $ACTIVITYTASKS): "
            #printf "${color}%s${normal}\n",  "$( egrep -m1 "^#TYPE\b" $ACTIVITYTASKS): "
            #printf "${color}%s${normal}\n",  "$( egrep -m1 "^TYPE\b" $ACTIVITYTASKS): "
            ;;
        *)
            ;;
    esac
    exit 0
fi

if [ ! -d $ACTIVITYDIR ]; then
    printf "\e[1;35m$ACTIVITYDIR\e[0m not found\nDo you want to continue? y/*"
    read -p " " argname
    if [[ ${argname^^} != "Y" ]]
    then
        exit 1
    fi
else
    $HOME/bin/rhaActivityFilesMove
fi

case $action in
    A|ADD)
        action="A"
        shift
        ;;
    C|CHANGE)
        action="C"
        shift
        ;;
    D|DEL|DELETE)
        action="D"
        shift
        ;;
    *)
        action="A"
        ;;
esac
    
#echo "Action=$action"
#echo "arguments=$@"
#echo "fileIndex=$count"
#exit 0

set -f #Turn off globbing

for (( argnum=1; argnum <= $#; argnum++ ))
do
    arg=${@:argnum:1}
    argDesc=${arg:0:2}
    argName=${arg:2}

    if [[ ${#arg} -eq 2 ]]
    then
        if [[ ! ${@:argnum+1:1} =~ $argRegex ]]
        then
            argName=${@:argnum+1:1}
        else
            argName=""
    fi
fi

      case $argDesc in
          -t) #TYPE Argument
              TYPE=$(stripquotes "${argName^^}")
              flagTYPe="true"
              ;;
          -s) #STATUS Argument
              STATUS=$(stripquotes "${argName^^}")
              flagSTATUS="true"
              ;;
          -k) #TASKS Argument
              TASKS=$(stripquotes "${argName^^}")
              flagTASKS="true"
              ;;
          -h) #HOUR Argument
              HOURS=$(stripquotes "${argName}")
              flagHOURS="true"
              ;;
          -d) #FILENAME Argument
              argName=$(stripquotes "$argName")
              argName="$(date --date "$argName" "+%F_%U").csv"
              FILENAME="activity_$argName"
              YEAR=${argName:0:4}
              MN=${argName:5:2}
              DAY=${argName:8:2}
              ;;
          -m) #MISCELLANEOUS Argument
              MISC=$argName
              flagMISC="true"
              ;;
          -c) #COMMENT Argument
             COMMENT=$argName
             flagCOMMENT="true"
             ;;
          -i) #fileIndex
              if [[ $argName =~ $numRegex && $action =~ $actionRegex ]]
              then
                  fileIndex="$( printf '%03d' $argName )"
              fi
              ;;
          -b) #turn on color
              color="\e[1;33m"
              ;;
          -w) #Weekday Being ignored - Finding the date will give day of week
              WEEKDAY=$argName
              ;;
          -g) #Time Being ignored - Finding the date will give day of week
              TIME=$argName
              ;;
           *) #If no argument do nothing
              ;;
       esac
       # echo $argName
done

#echo ":$MISC:"
#echo ":$COMMENT:"

#Input date if no -d argument
if [[ $FILENAME == "" ]]
then
    argName=""
    printf  "${color}Enter valid date to identify file${normal}: "
    read  -p " " argName
    argName="$(date --date "$argName" "+%F_%U").csv"
    FILENAME="activity_$argName"
    YEAR=${argName:0:4}
    MN=${argName:5:2}
    DAY=${argName:8:2}
fi

#Check if file exists

if [ -f $TODAYDIR/$FILENAME ]
then
    FILENAME=$TODAYDIR/$FILENAME
fi

if [  -f $ACTIVITYDIR/$YEAR/$MN/$FILENAME ] 
then
    FILENAME=$ACTIVITYDIR/$YEAR/$MN/$FILENAME
fi

if [[ $TODAYDIR/$FILENAME == $TODAYCSV ]]
then
    FILENAME=$TODAYDIR/$FILENAME
    fileIndex=$(addquotes "$fileIndex")
    echo "$fileIndex;$header_date;$header_weekno;$header_weekday;$header_time;$HEADER" > $FILENAME
fi

if [[ $(date --date=today "+%F") != $YEAR-$MN-$DAY ]]
then
    header_date="$YEAR-$MN-$DAY"
    header_weekday="$(date --date="$YEAR-$MN-$DAY" "+%a")"
    header_weekno="$(date --date="$YEAR-$MN-$DAY" "+%U")"
fi

if [ ! -f $FILENAME ]
then
    printf "\e[1;35m$FILENAME\e[0m does not exist\nDo you want to create? y/*"
    read -p " " argname
    if [[ ${argname^^} != "Y" ]]
    then
        exit 1
    else
        FILENAME=$TODAYDIR/$FILENAME
        fileIndex=$(addquotes "$fileIndex")
        header_date=$(addquotes "$header_date")
        header_weekno=$(addquotes "$header_weekno")
        header_weekday=$(addquotes "$header_weekday")
        header_time=$(addquotes "$header_time")
        echo "$fileIndex;$header_date$;$header_weekno;$header_weekday;$header_time;$HEADER" > $FILENAME
    fi
fi

set +f #Turn on globbing

# Check TYPE
if [[ $TYPE == "" && $action != "D" ]]
then
    argName=""
    printf "${color}Enter $( egrep -m1 "^TYPE\b" $ACTIVITYTASKS) ${normal}: "
    read -p " " argName
    TYPE=${argName^^}
fi

if [[ $( egrep -m1 "\b$TYPE\b" $ACTIVITYTASKS | sed -e "s/\(^..*\):.*$/\1/") == "TYPE" ]] 
then
   flagTYPE="true"
   else if [[ $action == "A" ]]
   then
       printf "${color}Invalid  $TYPE, Valid: $( egrep -m1 "^TYPE\b" $ACTIVITYTASKS)${normal}\n"
       exit 1
   fi
fi

#Check Status
if [[ $STATUS == "" && $action != "D" ]]
then
    argName=""
    printf "${color}Enter $( egrep -m1 "^STATUS\b" $ACTIVITYTASKS) ${normal}: "
    read -p " " argName
    STATUS=${argName^^}
fi

if [[ $STATUS == "" && $action == "A" ]]
then
    printf "${color}Invalid: $STATUS, \e[0m Valid: $( egrep -m1 "^STATUS\b" $ACTIVITYTASKS) ${color}\n"
    exit 1
fi

if [[ $STATUS != "" ]]; then flagSTATUS="true"; else STATUS=" "; fi

if [[ $( egrep -m1 "\b$STATUS\b" $ACTIVITYTASKS | sed -e "s/\(^..*\):.*$/\1/") != "STATUS" ]]; then STATUS=""; fi

if [[ $STATUS == "" && $flagSTATUS == "true" ]]; then 
    printf "${color}Invalid: $STATUS, \e[0m Valid: $( egrep -m1 "^STATUS\b" $ACTIVITYTASKS) ${color}\n"
    exit 1
fi

# Check if tasks exist
if [[ $TASKS == "" && $action != "D" ]]
then
    argName=""
    printf "${color}Enter TASKS ie. ASR,SUPPORT... ${normal}: "
    read -p " " argName
    TASKS=${argName^^}
fi

# The following egrep will find everything in the file if TASKS="".
if [[ $TASKS == "" ]]; then TASKS=" "; flagTASKS="false"; else flagTASKS="true"; fi

TASKS=$( egrep -m1 "\b$TASKS\b" $ACTIVITYTASKS )   

if [[ $TASKS != ""  ]]
then
    TASKS=$( echo $TASKS | sed -e "s/\(^..*\):.*$/\1/")
    #TASKS=$( egrep "\b$TASKS\b" $ACTIVITYTASKS | sed -e "s/\(^..*\):.*$/\1/")
    else if [[ $action == "A" ]]
    then
        printf "Action= $action   Invalid Task\n"
        exit 1
    fi
fi

if [[ $TASKS == "TYPE" || $TASKS == "STATUS" ]]
then
    printf "${color}Invalid Tasks... $TASKS   TYPE or STATUS is not a task${normal}\n"
    exit 1
fi

if [[ $TASKS == "" && $flagTASKS == "true" ]]; then printf "${color}Invalid Tasks Entry${normal}\n"; exit 1; fi


# Validate Hours format
if [[ $HOURS == "" && $flagHOURS == "true" ]]; then HOURS="0.00"; fi
if [[ $HOURS == "" && $action != "D" && $flagHOURS == "false" ]]
then
    argName=""
    printf "${color}Enter Hours ${normal}: "
    read -p " " argName
    HOURS=${argName}
fi
if [[ $HOURS == "" ]]; then HOURS="0.00"; else flagHOURS="true"; fi

retest='^[0-9.]+$'

if [[ $HOURS =~ $retest ]]
then
    HOURS=$(printf "%4.2f" $HOURS)
else
    echo "Invalid Hours - argument must be numeric"
    printf " rh P|W|O DONE|WIP|TODO|INFO TASK \e[1;35m$HOURS\e[0m "Comment 1" "Comment 2""
    exit 1
fi

#Enter a MISC
if [[ $MISC == "" && $flagMISC == "false" && $action != "D" ]]
then
    argName=""
    printf "${color}Enter MISC ${normal}: "
    read argName 
    MISC=$argName
fi

#Enter a comment
if [[ $COMMENT == "" && $flagCOMMENT == "false" && $action != "D" ]]
then
    argName=""
    printf "${color}Enter Comment ${normal}: "
    read argName 
    COMMENT=$argName
fi
case $action in
    D) #Test if delete fileIndex and delete
      if [[ fileIndex == "000" ]]
      then
         printf "${color}Enter fileIndex number to Delete${normal}: "
         read -p " " argName
         fileIndex="$( printf '%03d' $argName )"
      fi

      if [[ -f $activity_tmp ]]; then rm -f $activity_tmp; fi
      touch $activity_tmp

      while read line
      do
          if [[ ${line:1:3} == $fileIndex ]]
          then
              printf "\n${color}%s${normal} %s \n${color}%s${normal} %s\n Deleted line: $line from:         $FILENAME"
              printf "\n${color}Do you want to delete this line (Y/*)? ${normal} "
              read  -p " " -n1 -u 1 yn
              if [[ $yn != "Y" ]]
              then
                 printf "\n\n${color}Did not delete line:$line from file: $FILENAME${normal}\n"
                 exit 0
              fi
              argnum_DATE=$(echo $line | cut -d";" -f2)
              argnum_WEEKNO=$(echo $line | cut -d";" -f3)
              argnum_WEEKDAY=$(echo $line | cut -d";" -f4) 
              argnum_TIME=$(echo $line | cut -d";" -f5)
              argnum_TYPE=$(echo $line | cut -d";" -f6)
              argnum_STATUS=$(echo $line | cut -d";" -f7) 
              argnum_TASKS=$(echo $line | cut -d";" -f8) 
              argnum_HOURS=$(echo $line | cut -d";" -f9) 
              argnum_MISC=$(echo $line | cut -d";" -f10) 
              argnum_COMMENT=$(echo $line | cut -d";" -f11) 
              fileIndex=$(addquotes "$fileIndex")
              echo "rha $action -i$fileIndex -d$argnum_DATE -n$argnum_WEEKNO -w$argnum_WEEKDAY -g$argnum_TIME -t$argnum_TYPE -s$argnum_STATUS -k$argnum_TASKS -h$argnum_HOURS -m$argnum_MISC -c$argnum_COMMENT" >> $ACTIVITYLOG
              printf "\n${color}%s${normal} %s \n${color}%s${normal} %s \n" "Deleted line:" "$line" "from:        " "$FILENAME"
          else
              echo $line >> $activity_tmp
          fi        
      done < $FILENAME
      mv  -f $activity_tmp $FILENAME
      exit 0
      ;;
    A)
        while read line
        do
            fileIndex=${line:1:3}
        done  < $FILENAME

        fileIndex=$(echo "$fileIndex + 1" | bc)
        fileIndex=$( printf '%03d' $fileIndex)
        ;;
    C) #Test if change record fileIndex
      if [[ $fileIndex == "000" ]]
      then
         printf "${color}Enter fileIndex number to Change${normal}: "
         read -p " " argName
         fileIndex="$( printf '%03d' $argName )"
      fi
      if [[ $fileIndex == "000" ]] ; then printf "${color} aborting file index cannot be 0${normal}: "; exit 0; fi

      if [[ -f $activity_tmp ]]; then rm -f $activity_tmp; fi
      touch $activity_tmp

      while read line
      do
          if [[ ${line:1:3} == $fileIndex ]]
          then
              printf "\n${color}%s${normal}\n" "Changing record $fileIndex in $FILENAME"
              argnum_DATE=$(echo $line | cut -d";" -f2)
              argnum_WEEKNO=$(echo $line | cut -d";" -f3)
              argnum_WEEKDAY=$(echo $line | cut -d";" -f4) 
              argnum_TIME=$(echo $line | cut -d";" -f5)
              argnum_TYPE=$(echo $line | cut -d";" -f6)
              argnum_STATUS=$(echo $line | cut -d";" -f7) 
              argnum_TASKS=$(echo $line | cut -d";" -f8) 
              argnum_HOURS=$(echo $line | cut -d";" -f9) 
              argnum_MISC=$(echo $line | cut -d";" -f10) 
              argnum_COMMENT=$(echo $line | cut -d";" -f11) 

              if [[ $flagTYPE    != "true" ]]; then    TYPE=$(echo $line | cut -d";" -f6);   fi
              if [[ $flagSTATUS  != "true" ]]; then  STATUS=$(echo $line | cut -d";" -f7);   fi
              if [[ $flagTASKS   != "true" ]]; then   TASKS=$(echo $line | cut -d";" -f8);   fi
              if [[ $flagHOURS   != "true" ]]; then   HOURS=$(echo $line | cut -d";" -f9);   fi
              if [[ $flagMISC    != "true" ]]; then    MISC=$(echo $line | cut -d";" -f10);  fi
              if [[ $flagCOMMENT != "true" ]]; then COMMENT=$(echo $line | cut -d";" -f11);  fi

              header_date=$(addquotes "$header_date")
              header_weekno=$(addquotes "$header_weekno")
              header_weekday=$(addquotes "$header_weekday")
              header_time=$(addquotes "$header_time")
              TYPE=$(addquotes "$TYPE")
              STATUS=$(addquotes "$STATUS")
              TASKS=$(addquotes "$TASKS")
              HOURS=$(addquotes "$HOURS")
              MISC=$(addquotes "$MISC")
              COMMENT=$(addquotes "$COMMENT")
              fileIndex=$(addquotes "$fileIndex")
              
              echo "$fileIndex;$header_date;$header_weekno;$header_weekday;$header_time;$TYPE;$STATUS;$TASKS;$HOURS;$MISC;$COMMENT;" >> $activity_tmp
              echo "rha $action -i$fileIndex -d$argnum_DATE -n$argnum_WEEKNO -w$argnum_WEEKDAY -g$argnum_TIME -t$argnum_TYPE -s$argnum_STATUS -k$argnum_TASKS -h$argnum_HOURS -m$argnum_MISC -c$argnum_COMMENT    #old record" >> $ACTIVITYLOG
              echo "rha $action -i$fileIndex -d$argnum_DATE -n$argnum_WEEKNO -w$argnum_WEEKDAY -g$argnum_TIME -t$TYPE -s$STATUS -k$TASKS -h$HOURS -m$MISC -c$COMMENT     #new record" >> $ACTIVITYLOG
              printf "\n${color}%s${normal}\n" "rha $action -i$fileIndex -d$argnum_DATE -n$argnum_WEEKNO -w$argnum_WEEKDAY -g$argnum_TIME -t$argnum_TYPE -s$argnum_STATUS -k$argnum_TASKS -h$argnum_HOURS -m$argnum_MISC -c$argnum_COMMENT    #old record"
              printf "\n${color}%s${normal}" "rha $action -i$fileIndex -d$argnum_DATE -n$argnum_WEEKNO -w$argnum_WEEKDAY -g$argnum_TIME -t$TYPE -s$STATUS -k$TASKS -h$HOURS -m$MISC -c$COMMENT     #new record"
          else
              echo $line >> $activity_tmp
          fi        
      done < $FILENAME
      mv  -f $activity_tmp $FILENAME
      exit 0
      ;;
esac

header_date=$(addquotes "$header_date")
header_weekno=$(addquotes "$header_weekno")
header_weekday=$(addquotes "$header_weekday")
header_time=$(addquotes "$header_time")

TYPE=$(addquotes "$TYPE")
STATUS=$(addquotes "$STATUS")
TASKS=$(addquotes "$TASKS")
HOURS=$(addquotes "$HOURS")
MISC=$(addquotes "$MISC")
COMMENT=$(addquotes "$COMMENT")
fileIndex=$(addquotes "$fileIndex")

echo "$fileIndex;$header_date;$header_weekno;$header_weekday;$header_time;$TYPE;$STATUS;$TASKS;$HOURS;$MISC;$COMMENT;" >> $FILENAME
printf "${color}$fileIndex;$header_date;$header_weekno;$header_weekday;$header_time;$TYPE;$STATUS;$TASKS;$HOURS;$MISC;$COMMENT;${normal}\n"
echo "rha $action -i$fileIndex -d$header_date -n$header_weekno -w$header_weekday -g$header_time -t$TYPE -s$STATUS -k$TASKS -h$HOURS -m$MISC -c$COMMENT" >> $ACTIVITYLOG
printf "${color}rha $action -i${normal}$fileIndex ${color}-d${normal}$header_date ${color}-n${normal}$header_weekno ${color}-w${normal}$header_weekday ${color}-g${normal}$header_time ${color}-t${normal}$TYPE ${color}-s${normal}$STATUS ${color}-k${normal}$TASKS ${color}-h${normal}$HOURS ${color}-m${normal}$MISC ${color}-c${normal}$COMMENT\n"
exit 0
```